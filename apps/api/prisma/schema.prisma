generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://docker:docker@localhost:5432/react?schema=public"
}

model User {
  id           String   @id @default(uuid())
  name         String?
  email        String   @unique
  passwordHash String?  @map("password_hash")
  avatarUrl    String?  @map("avatar_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  tokens       Token[]
  invites      Invite[]
  investments  Investment[]
  transactions Transaction[]

  @@map("users")
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("tokens")
}

enum Role {
  ADMIN
  MEMBER
}

model Invite {
  id        String   @id @default(uuid())
  email     String
  role      Role
  createdAt DateTime @default(now()) @map("created_at")

  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String? @map("author_id")

  @@index([email])
  @@map("invites")
}

enum InvestmentType {
  FIXED_INCOME
  REAL_ESTATE_FUND
  STOCKS
  MUTUAL_FUNDS
}

model InvestmentGroup {
  id          String             @id @default(uuid())
  name        String
  type        InvestmentType
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @updatedAt @map("updated_at")

  investmentPlans InvestmentPlan[]

  @@map("investment_groups")
}

enum InvestmentRiskLevel {
  LOW
  MEDIUM
  HIGH
}

model InvestmentPlan {
  id                       String           @id @default(uuid())
  name                     String
  description              String
  interestRate             Float
  minimumInvestmentAmount  Float            @map("minimum_investment_amount")
  maximumInvestmentAmount  Float            @map("maximum_investment_amount")
  duration                 Int
  riskLevel                InvestmentRiskLevel
  liquidity                DateTime         @default(now()) @map("liquidity")
  penaltyForEarlyWithdrawal Float            @map("penalty_for_early_withdrawal")
  currency                 String
  maturityDate             DateTime         @map("maturity_date")
  createdAt                DateTime         @default(now()) @map("created_at")
  updatedAt                DateTime         @updatedAt @map("updated_at")

  investmentGroup          InvestmentGroup  @relation(fields: [investmentGroupId], references: [id])
  investmentGroupId        String           @map("investment_group_id")

  investments              Investment[]

  @@map("investment_plans")
}


model Investment {
  id              String         @id @default(uuid())
  amount          Float
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")

  owner           User           @relation(fields: [ownerId], references: [id])
  ownerId         String         @map("user_id")

  investmentPlan  InvestmentPlan @relation(fields: [investmentPlanId], references: [id])
  investmentPlanId String        @map("investment_plan_id")

  @@map("investments")
}

model Transaction {
  id          String   @id @default(uuid())
  amount      Float
  type        String   
  createdAt   DateTime @default(now()) @map("created_at")

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @map("user_id")

  @@map("transactions")
}
